#!/bin/sh

fancy_echo() {
  local fmt="$1"; shift
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

arch="$(uname -m)"

if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != "$HOMEBREW_PREFIX/bin/zsh" ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

if [ "$arch" = "arm64" ]; then
  fancy_echo "Installing Rosetta ..."
  if ! pkgutil --pkg-info=com.apple.pkg.RosettaUpdateAuto > /dev/null 2>&1; then
    softwareupdate --install-rosetta --agree-to-license
  fi
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  /bin/bash -c \
    "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/brew shellenv)\""

  export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

brew analytics off

brew bundle --no-lock --file=- <<EOF
tap "homebrew/services"

# Unix
brew "git"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "wget"
brew "zsh"

# GitHub
brew "gh"

# Image manipulation
brew "imagemagick"

# PDF Rendering
cask "wkhtmltopdf"

# Programming language prerequisites and package managers
brew "coreutils"
brew "libyaml" # should come after openssl
brew "readline"
brew "yarn"
brew "zlib"
EOF

fancy_echo "Installing mysql libraries ..."
brew install mysql-client@5.7
brew link --force mysql-client@5.7
symlink="$HOMEBREW_PREFIX/opt/mysql"
if [ ! -e "$symlink" ] && [ ! -L "$symlink" ]; then
  ln -s "$HOMEBREW_PREFIX/opt/mysql-client@5.7" "$symlink"
fi

fancy_echo "Installing postgresql libraries ..."
brew install libpq
brew link --force libpq

fancy_echo "Installing asdf version manager ..."
if [ ! -d "$HOME/.asdf" ]; then
  brew install asdf
  append_to_zshrc "source $(brew --prefix asdf)/libexec/asdf.sh" 1
fi

if [ ! -f "$HOME/.asdfrc" ]; then
  echo "legacy_version_file = yes" > "$HOME/.asdfrc"
fi

. "$(brew --prefix asdf)/libexec/asdf.sh"

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

fancy_echo "Installing latest Ruby ..."
install_asdf_language "ruby"
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

fancy_echo "Installing latest Node ..."
install_asdf_language "nodejs"

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  . "$HOME/.laptop.local"
fi

fancy_echo "Your laptop setup is complete!"

# ft=shell
