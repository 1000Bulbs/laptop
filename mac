#!/bin/sh
# ft=shell

fancy_echo() {
  local fmt="$1"
  shift
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >>"$zshrc"
    else
      printf "\\n%s\\n" "$text" >>"$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

arch="$(uname -m)"

if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

update_shell() {
  local shell_path
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells >/dev/null 2>&1; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
*/zsh)
  if [ "$(command -v zsh)" != "$HOMEBREW_PREFIX/bin/zsh" ]; then
    update_shell
  fi
  ;;
*)
  update_shell
  ;;
esac

if [ "$arch" = "arm64" ]; then
  fancy_echo "Installing Rosetta ..."
  if ! pkgutil --pkg-info=com.apple.pkg.RosettaUpdateAuto >/dev/null 2>&1; then
    softwareupdate --install-rosetta --agree-to-license
  fi
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  /bin/bash -c \
    "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/brew shellenv)\""

  export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

brew analytics off

brew bundle --no-lock --file=- <<EOF
tap "homebrew/services"

# Unix
brew "git"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "wget"
brew "zsh"

# GitHub
brew "gh"

# Image manipulation
brew "imagemagick"

# PDF Rendering
cask "wkhtmltopdf"

# Programming language prerequisites and package managers
brew "coreutils"
brew "libyaml" # should come after openssl
brew "readline"
brew "yarn"
brew "zlib"

# Databases
brew "libpq", link: true
# mysql-client@5.7 is now expired in homebrew
# so we will have to install it manually
# brew "mysql-client@5.7", link: true
EOF

# Hack Unsupported Taps
# We still rely on a few brew packages that are now unsupported, and
# need to hack their formulae to work.

fancy_echo "Hacking unsupported brew Taps"

brew tap homebrew/core --force

hack_unsupported_tap_failed() {
  echo "WARNING: unable to correct $1 formula"
  echo "Please use 'brew edit $1' to correct the formula"
  echo "(remove the 'disable! date:' line)"
  exit 1
}

hack_unsupported_tap() {
  # in the following command we might encounter .bak files that were not removed properly
  # so we ensure the actual Formula file is the one we select
  local formula ; formula="$(find $HOMEBREW_PREFIX/Library/Taps -name "$1.*" | sort | head -1)"

  if [ -f "$formula" ]; then
    sed -i '' '/disable! date:/d' "$formula" 
    if [ $? -eq 0 ]; then
      echo "âˆš $1"
    else
      hack_unsupported_tap_failed "$1" 
    fi
  else
    hack_unsupported_tap_failed "$1"
  fi
}

hack_unsupported_tap openssl@1.1
hack_unsupported_tap mysql-client@5.7

unset -f hack_unsupported_tap
unset -f hack_unsupported_tap_failed

# Install mysql-client@5.7
HOMEBREW_NO_INSTALL_FROM_API=1 brew install mysql-client@5.7
brew link --force mysql-client@5.7

# Mac apps
# This will first check if a user has either manually installed the app
# or if homebrew has already installed the app so it doesn't get an error.

# 1password
if [ ! -d "/Applications/1Password.app" ]; then
  brew install --cask 1password
fi

# docker
if [ ! -d "/Applications/Docker.app" ]; then
  brew install --cask docker
fi

# google chrome
if [ ! -d "/Applications/Google Chrome.app" ]; then
  brew install --cask google-chrome
fi

# iterm2
if [ ! -d "/Applications/iTerm.app" ]; then
  brew install --cask iterm2
fi

# rectangle
if [ ! -d "/Applications/Rectangle.app" ]; then
  brew install --cask rectangle
fi

# slack
if [ ! -d "/Applications/Slack.app" ]; then
  brew install --cask slack
fi

if [ ! -d "$HOME/.asdf" ]; then
  fancy_echo "Installing asdf version manager ..."
  brew install asdf
  append_to_zshrc "source $(brew --prefix asdf)/libexec/asdf.sh"
fi

if [ ! -f "$HOME/.asdfrc" ]; then
  echo "legacy_version_file = yes" >"$HOME/.asdfrc"
fi

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf latest "$language")"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed >/dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

# shellcheck disable=SC1091
. "$(brew --prefix asdf)/libexec/asdf.sh"

fancy_echo "Installing latest Ruby ..."
add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_language "ruby"
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

append_to_zshrc '# Fix for installing older versions of Ruby'
append_to_zshrc 'export DLDFLAGS="-Wl,-undefined,dynamic_lookup"' 1
append_to_zshrc 'export OPENSSL_CFLAGS="-Wno-error=implicit-function-declaration"' 1
append_to_zshrc 'export CFLAGS=-Wno-error="implicit-function-declaration"' 1

fancy_echo "Installing latest Node ..."
add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
install_asdf_language "nodejs"

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  . "$HOME/.laptop.local"
fi

fancy_echo "Your laptop setup is complete!"

# ft=shell
